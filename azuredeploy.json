{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2h4PW71rJ+gQcOuj7H/uhfirCzrcnrb21w60hkf3UsAVmhQZYWpP1c8613bGdq/J2WlfQ2EtVu1JS63zAcn1U0tituwROQXPrFcGrdDM1jRs5P1teUXU5tboOUe1LEOIszG27k6HQsDfDHjMBq4SpV8U+WS16g4UhbfmtMgxIUlw0ixDY6zP2oYpgY1NnH0rfI4L5F1u1nlVskkNCmeTGDy8VD/V1wgajQijQUT48UCrnZsB90Spo19Ix01pDz0eddOXXQZeV/iNWvlwFrPzAMttGmlF37WW+SUVkWnhqenDhGjBFflCKqQ4UXu7BT+OXgH1BmsJ+aT3xEkj/7jZCw== delfin@deneb",
      "metadata": {
        "description": "Configure all linux machines with the SSH public key string, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "allowedValues": [
        "Standard_B2s",
        "Standard_B2ms",
        "Standard_D2s_v3",
        "Standard_D2_v3",
        "Standard_DS2_v2",
        "Standard_D2_v2",
        "Standard_DS2",
        "Standard_D2",
        "Standard_A2_v2",
        "Standard_A2"
      ],
      "metadata": {
        "description": "The virutal machine size to use. We picked out the sizes with 2 vCPUs, but in real world projects you can choose other sizes as you desired."
      }
    },
    "auxvmDnsPrefix": {
      "type": "string",
      "defaultValue": "[concat('auxvm-',uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Unique DNS Name prefix for the Public IP used to access the Auxiliary Virtual Machine. Azure will form the final DNS name as '<prefix>.<region>.cloudapp.azure.com'."
      }
    },
    "kubernetesVersion": {
      "type": "string",
      "defaultValue": "1.13.5",
      "allowedValues": [
        "1.13.5"
      ],
      "metadata": {
        "description": "The version of the Kubernetes running in AKS."
      }
    },
    "servicePrincipalAppId": {
      "type": "string",
      "defaultValue": "ddaac2d7-ef70-4ae0-8bc9-b4c2b92abe03",
      "metadata": {
        "description": "Service Principal App ID (also called Client ID) that has contributor rights to the subscription used for this deployment. It is used by the Kubernetes cluster to dynamically manage resources (e.g. user-defined load balancers)."
      }
    },
    "servicePrincipalAppKey": {
      "type": "securestring",
      "defaultValue": "/z.t1Inb9JlzLdWjZe/4hZ:mgG4L]5w/",
      "metadata": {
        "description": "Service Principal App Key (also called Client Secret) that has contributor rights to the subscription used for this deployment. It is used by the Kubernetes cluster to dynamically manage resources (e.g. user-defined load balancers)."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "acrName": {
      "type": "string",
      "minLength": 5,
      "maxLength": 50,
      "defaultValue": "[concat('acr-registry-',uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of your Azure Container Registry"
      }
    },
    "acrAdminUserEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable admin user that have push / pull permission to the registry."
      }
    },
    "acrSku": {
      "type": "string",
      "metadata": {
        "description": "Tier of your Azure Container Registry."
      },
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "jenkinsAdminPassword": {
      "type": "securestring",
      "defaultValue": "admin",
      "metadata": {
        "description": "Admin password for created Jenkins instance."
      }
    },
    "applicationGitUrl": {
      "type": "string",
      "defaultValue": "https://github.com/elos-tech/openshift-cicd-app",
      "metadata": {
        "description": "Application source GIT repository URL."
      }
    }
  },
  "variables": {
    "resourcePrefix": "auxvm",
    "OSDiskName": "[concat(variables('resourcePrefix'), '-os-disk-', uniqueString(resourceGroup().id))]",
    "nicName": "[concat(variables('resourcePrefix'), '-nic-', uniqueString(resourceGroup().id))]",
    "subnetName": "[concat(variables('resourcePrefix'), '-subnet-', uniqueString(resourceGroup().id))]",
    "publicIPAddressName": "[concat(variables('resourcePrefix'), '-ip-', uniqueString(resourceGroup().id))]",
    "vmName": "[concat(variables('resourcePrefix'), '-vm-', uniqueString(resourceGroup().id))]",
    "virtualNetworkName": "[concat(variables('resourcePrefix'), '-vnet-', uniqueString(resourceGroup().id))]",
    "vmExtensionName": "[concat(variables('resourcePrefix'), '-bootstrap-', uniqueString(resourceGroup().id))]",
    "frontEndNSGName": "[concat(variables('resourcePrefix'), '-nsg-', uniqueString(resourceGroup().id))]",
    "aksName": "aks-cluster",
    "aksDnsPrefix": "[concat('aks', uniqueString(resourceGroup().id))]",
    "_artifactsLocation": "https://raw.githubusercontent.com/elos-tech/aks-deploy-test/master",
    "_extensionScript": "bootstrap.sh",
    "_artifactsLocationSasToken": ""
  },
  "resources": [
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('location')]",
      "properties": {
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('sshPublicKey')]"
                }
              ]
            }
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04-LTS",
            "version": "latest"
          },
          "osDisk": {
            "name": "[variables('OSDiskName')]",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
      ],
      "resources": [
        {
          "type": "extensions",
          "name": "[variables('vmExtensionName')]",
          "apiVersion": "2015-06-15",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
            "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(variables('_artifactsLocation'), '/artefacts/', variables('_extensionScript'), variables('_artifactsLocationSasToken'))]"
              ]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('./', variables('_extensionScript'), ' --app_id \"', parameters('servicePrincipalAppId'), '\" --app_key \"', parameters('servicePrincipalAppKey'), '\" --subscription_id \"', subscription().subscriptionId, '\" --tenant_id \"', subscription().tenantId, '\" --resource_group \"', resourceGroup().name, '\" --aks_name \"', variables('aksName'), '\" --auxvm_fqdn \"', reference(variables('publicIPAddressName')).dnsSettings.fqdn, '\" --artifacts_location \"', variables('_artifactsLocation'), '\" --sas_token \"', variables('_artifactsLocationSasToken'), '\" --jenkins_admin_password \"', parameters('jenkinsAdminPassword'), '\" --application_git_url \"', parameters('applicationGitUrl'), '\" --registry_name \"', parameters('acrName'), '\" &>/deployment.log')]"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "2016-12-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.89.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.89.0.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "apiVersion": "2016-09-01",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('frontEndNSGName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('frontEndNSGName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "apiVersion": "2017-06-01",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('auxvmDnsPrefix')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('frontEndNSGName')]",
      "apiVersion": "2017-06-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-ssh",
            "properties": {
              "priority": 1000,
              "protocol": "Tcp",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-08-31",
      "type": "Microsoft.ContainerService/managedClusters",
      "location": "[parameters('location')]",
      "name": "[variables('aksName')]",
      "properties": {
        "kubernetesVersion": "[parameters('kubernetesVersion')]",
        "dnsPrefix": "[variables('aksDnsPrefix')]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "count": 2,
            "vmSize": "[parameters('virtualMachineSize')]",
            "osType": "Linux",
            "storageProfile": "ManagedDisks"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                "keyData": "[parameters('sshPublicKey')]"
              }
            ]
          }
        },
        "servicePrincipalProfile": {
          "ClientId": "[parameters('servicePrincipalAppId')]",
          "Secret": "[parameters('servicePrincipalAppKey')]"
        }
      }
    },
    {
      "name": "[parameters('acrName')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2017-10-01",
      "location": "[parameters('location')]",
      "comments": "Container registry for storing docker images",
      "tags": {
        "displayName": "Container Registry",
        "container.registry": "[parameters('acrName')]"
      },
      "sku": {
        "name": "[parameters('acrSku')]",
        "tier": "[parameters('acrSku')]"
      },
      "properties": {
        "adminUserEnabled": "[parameters('acrAdminUserEnabled')]"
      }
    }
  ],
  "outputs": {
    "Admin Username": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    },
    "AuxVM FQDN": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
    },
    "AuxVM URL": {
      "type": "string",
      "value": "[concat('http://', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
    },
    "SSH": {
      "type": "string",
      "value": "[concat('ssh -L 8080:localhost:8080 ', parameters('adminUsername'), '@', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
    },
    "Kubernetes Master FQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))).fqdn]"
    },
    "ACR Server": {
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('acrName')),'2017-10-01').loginServer]",
      "type": "string"
    }
  }
}
